// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: matching-engine/matchingEngine.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchingEngineClient is the client API for MatchingEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingEngineClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	PublishTrade(ctx context.Context, in *PublishTradeRequest, opts ...grpc.CallOption) (MatchingEngine_PublishTradeClient, error)
	PublishOrderCreation(ctx context.Context, in *PublishOrderRequest, opts ...grpc.CallOption) (MatchingEngine_PublishOrderCreationClient, error)
}

type matchingEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingEngineClient(cc grpc.ClientConnInterface) MatchingEngineClient {
	return &matchingEngineClient{cc}
}

func (c *matchingEngineClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/matching_engine.MatchingEngine/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineClient) PublishTrade(ctx context.Context, in *PublishTradeRequest, opts ...grpc.CallOption) (MatchingEngine_PublishTradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchingEngine_ServiceDesc.Streams[0], "/matching_engine.MatchingEngine/PublishTrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchingEnginePublishTradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchingEngine_PublishTradeClient interface {
	Recv() (*PublishTradeResponse, error)
	grpc.ClientStream
}

type matchingEnginePublishTradeClient struct {
	grpc.ClientStream
}

func (x *matchingEnginePublishTradeClient) Recv() (*PublishTradeResponse, error) {
	m := new(PublishTradeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *matchingEngineClient) PublishOrderCreation(ctx context.Context, in *PublishOrderRequest, opts ...grpc.CallOption) (MatchingEngine_PublishOrderCreationClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchingEngine_ServiceDesc.Streams[1], "/matching_engine.MatchingEngine/PublishOrderCreation", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchingEnginePublishOrderCreationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchingEngine_PublishOrderCreationClient interface {
	Recv() (*PublishOrderResponse, error)
	grpc.ClientStream
}

type matchingEnginePublishOrderCreationClient struct {
	grpc.ClientStream
}

func (x *matchingEnginePublishOrderCreationClient) Recv() (*PublishOrderResponse, error) {
	m := new(PublishOrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatchingEngineServer is the server API for MatchingEngine service.
// All implementations must embed UnimplementedMatchingEngineServer
// for forward compatibility
type MatchingEngineServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	PublishTrade(*PublishTradeRequest, MatchingEngine_PublishTradeServer) error
	PublishOrderCreation(*PublishOrderRequest, MatchingEngine_PublishOrderCreationServer) error
	mustEmbedUnimplementedMatchingEngineServer()
}

// UnimplementedMatchingEngineServer must be embedded to have forward compatible implementations.
type UnimplementedMatchingEngineServer struct {
}

func (UnimplementedMatchingEngineServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedMatchingEngineServer) PublishTrade(*PublishTradeRequest, MatchingEngine_PublishTradeServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishTrade not implemented")
}
func (UnimplementedMatchingEngineServer) PublishOrderCreation(*PublishOrderRequest, MatchingEngine_PublishOrderCreationServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishOrderCreation not implemented")
}
func (UnimplementedMatchingEngineServer) mustEmbedUnimplementedMatchingEngineServer() {}

// UnsafeMatchingEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingEngineServer will
// result in compilation errors.
type UnsafeMatchingEngineServer interface {
	mustEmbedUnimplementedMatchingEngineServer()
}

func RegisterMatchingEngineServer(s grpc.ServiceRegistrar, srv MatchingEngineServer) {
	s.RegisterService(&MatchingEngine_ServiceDesc, srv)
}

func _MatchingEngine_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matching_engine.MatchingEngine/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngine_PublishTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublishTradeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchingEngineServer).PublishTrade(m, &matchingEnginePublishTradeServer{stream})
}

type MatchingEngine_PublishTradeServer interface {
	Send(*PublishTradeResponse) error
	grpc.ServerStream
}

type matchingEnginePublishTradeServer struct {
	grpc.ServerStream
}

func (x *matchingEnginePublishTradeServer) Send(m *PublishTradeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MatchingEngine_PublishOrderCreation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublishOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchingEngineServer).PublishOrderCreation(m, &matchingEnginePublishOrderCreationServer{stream})
}

type MatchingEngine_PublishOrderCreationServer interface {
	Send(*PublishOrderResponse) error
	grpc.ServerStream
}

type matchingEnginePublishOrderCreationServer struct {
	grpc.ServerStream
}

func (x *matchingEnginePublishOrderCreationServer) Send(m *PublishOrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MatchingEngine_ServiceDesc is the grpc.ServiceDesc for MatchingEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matching_engine.MatchingEngine",
	HandlerType: (*MatchingEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _MatchingEngine_CreateOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishTrade",
			Handler:       _MatchingEngine_PublishTrade_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishOrderCreation",
			Handler:       _MatchingEngine_PublishOrderCreation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matching-engine/matchingEngine.proto",
}
